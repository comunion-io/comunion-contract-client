/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type sendWhenHasChanges = ContractEventLog<{
  id: string;
  setting: [
    string,
    [string, string, string, string[]],
    [string, string, string[]],
    [string, string, string[], string, string, string, string]
  ];
  0: string;
  1: [
    string,
    [string, string, string, string[]],
    [string, string, string[]],
    [string, string, string[], string, string, string, string]
  ];
}>;

export interface IRO extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IRO;
  clone(): IRO;
  methods: {
    fullSet(
      setting: [
        string,
        [string, string, string, string[]],
        [number | string | BN, number | string | BN, string[]],
        [
          number | string | BN,
          string,
          string[],
          number | string | BN,
          string,
          string,
          string
        ]
      ]
    ): NonPayableTransactionObject<void>;

    getTokenSetting(
      id: string
    ): NonPayableTransactionObject<{
      tokenName: string;
      tokenSymbol: string;
      tokenAddr: string;
      walletAddrs: string[];
      0: string;
      1: string;
      2: string;
      3: string[];
    }>;

    getVoterSetting(
      id: string
    ): NonPayableTransactionObject<{
      voteType: string;
      voteTokenLimit: string;
      voteAssignAddrs: string[];
      voteMinSupporters: string;
      voteMinApprovalPercent: string;
      voteMinDurationHours: string;
      voteMaxDurationHours: string;
      0: string;
      1: string;
      2: string[];
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    partialSet(
      setting: [
        string,
        [string, string, string, string[]],
        [number | string | BN, number | string | BN, string[]],
        [
          number | string | BN,
          string,
          string[],
          number | string | BN,
          string,
          string,
          string
        ]
      ]
    ): NonPayableTransactionObject<void>;

    setting(
      id: string
    ): NonPayableTransactionObject<
      [
        string,
        [string, string, string, string[]],
        [string, string, string[]],
        [string, string, string[], string, string, string, string]
      ]
    >;
  };
  events: {
    sendWhenHasChanges(cb?: Callback<sendWhenHasChanges>): EventEmitter;
    sendWhenHasChanges(
      options?: EventOptions,
      cb?: Callback<sendWhenHasChanges>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "sendWhenHasChanges", cb: Callback<sendWhenHasChanges>): void;
  once(
    event: "sendWhenHasChanges",
    options: EventOptions,
    cb: Callback<sendWhenHasChanges>
  ): void;
}
