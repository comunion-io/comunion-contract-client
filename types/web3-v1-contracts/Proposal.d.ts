/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type accepted = ContractEventLog<{
  id: string;
  proposal: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    [string, string, string, string, string, string, string, string],
    [string],
    [string, string, string, string],
    string,
    string
  ];
  paymentDetails: [string, string, string][];
  0: string;
  1: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    [string, string, string, string, string, string, string, string],
    [string],
    [string, string, string, string],
    string,
    string
  ];
  2: [string, string, string][];
}>;
export type statusChanged = ContractEventLog<{
  id: string;
  original: string;
  target: string;
  0: string;
  1: string;
  2: string;
}>;
export type voted = ContractEventLog<{
  id: string;
  v: [string, string, string, string, string, string];
  0: string;
  1: [string, string, string, string, string, string];
}>;

export interface Proposal extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Proposal;
  clone(): Proposal;
  methods: {
    accept(
      proposal: [
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        string,
        string,
        [
          string,
          number | string | BN,
          number | string | BN,
          string,
          number | string | BN,
          number | string | BN,
          string,
          string
        ],
        [number | string | BN],
        [
          number | string | BN,
          string,
          number | string | BN,
          number | string | BN
        ],
        number | string | BN,
        string
      ],
      paymentDetails: [number | string | BN, number | string | BN, string][]
    ): PayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        [string, string, string, string, string, string, string, string],
        [string],
        [string, string, string, string],
        string,
        string
      ]
    >;

    proposalDetail(
      id: string,
      serialId: string
    ): NonPayableTransactionObject<{
      paymentDetails: [string, string, string][];
      0: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        [string, string, string, string, string, string, string, string],
        [string],
        [string, string, string, string],
        string,
        string
      ];
      1: [string, string, string][];
    }>;

    discoProposalCount(id: string): NonPayableTransactionObject<string>;

    decide(
      id: string,
      serialId: string,
      target: number | string | BN
    ): NonPayableTransactionObject<void>;

    proposalStatus(
      id: string,
      serialId: string
    ): NonPayableTransactionObject<string>;

    doVote(
      v: [
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<void>;

    releaseProposal(
      discoId: string,
      serialId: string
    ): NonPayableTransactionObject<void>;

    fullSet(
      proposal: [
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        string,
        string,
        [
          string,
          number | string | BN,
          number | string | BN,
          string,
          number | string | BN,
          number | string | BN,
          string,
          string
        ],
        [number | string | BN],
        [
          number | string | BN,
          string,
          number | string | BN,
          number | string | BN
        ],
        number | string | BN,
        string
      ],
      paymentDetails: [number | string | BN, number | string | BN, string][]
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        [string, string, string, string, string, string, string, string],
        [string],
        [string, string, string, string],
        string,
        string
      ]
    >;

    setIROBase(_iroAddress: string): NonPayableTransactionObject<void>;

    setDiscoBase(_discoAddress: string): NonPayableTransactionObject<void>;
  };
  events: {
    accepted(cb?: Callback<accepted>): EventEmitter;
    accepted(options?: EventOptions, cb?: Callback<accepted>): EventEmitter;

    statusChanged(cb?: Callback<statusChanged>): EventEmitter;
    statusChanged(
      options?: EventOptions,
      cb?: Callback<statusChanged>
    ): EventEmitter;

    voted(cb?: Callback<voted>): EventEmitter;
    voted(options?: EventOptions, cb?: Callback<voted>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "accepted", cb: Callback<accepted>): void;
  once(event: "accepted", options: EventOptions, cb: Callback<accepted>): void;

  once(event: "statusChanged", cb: Callback<statusChanged>): void;
  once(
    event: "statusChanged",
    options: EventOptions,
    cb: Callback<statusChanged>
  ): void;

  once(event: "voted", cb: Callback<voted>): void;
  once(event: "voted", options: EventOptions, cb: Callback<voted>): void;
}
